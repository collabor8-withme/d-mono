{"version":3,"file":"coreHook.js","sourceRoot":"","sources":["coreHook.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport DepGraph from \"../DepGraph\";\nimport { Config } from \"../../index\";\n\nconst depGraph: DepGraph = new DepGraph();\n\nfunction YARNorNPMAdapter(\n    dependencies: { [key: string]: string },\n    sourceId: string,\n    config: Config,\n    level: number = 1,\n    processedDeps: Set<string> = new Set()) {\n    for (const depName in dependencies) {\n\n        const { NODE_MODULES_DIR, DEPTH } = config;\n\n        if (level === DEPTH + 1) {\n            return;\n        }\n\n        if (processedDeps.has(depName)) {\n            continue;\n        }\n        processedDeps.add(depName);\n\n        // 记录目标节点\n        const targetId = depName + dependencies[depName];\n\n        depGraph.insertNode(depName, dependencies[depName], level);\n        depGraph.insertEgde(sourceId, targetId);\n        const nestedPkgJson = path.join(NODE_MODULES_DIR, depName, \"package.json\");\n        const content = fs.readFileSync(nestedPkgJson, {\n            encoding: \"utf-8\"\n        });\n\n        const { dependencies: dep } = JSON.parse(content);\n        YARNorNPMAdapter(dep, targetId, config, level + 1, processedDeps);\n\n        processedDeps.delete(depName);\n    }\n}\n\nfunction PNPMAdapter(\n    dependencies: { [key: string]: string },\n    sourceId: string,\n    config: Config,\n    level: number = 1,\n    processedDeps: Set<string> = new Set()) {\n    for (const depName in dependencies) {\n        const { NODE_MODULES_DIR, DEPTH } = config;\n        if (level === DEPTH + 1) {\n            return;\n        }\n        if (processedDeps.has(depName)) {\n            continue;\n        }\n        processedDeps.add(depName);\n        // 记录目标节点\n        const targetId = depName + dependencies[depName];\n\n        depGraph.insertNode(depName, dependencies[depName], level);\n        depGraph.insertEgde(sourceId, targetId);\n        let nestedPkgJson = \"\";\n        if (level === 1) {\n            nestedPkgJson = path.join(NODE_MODULES_DIR, depName, \"package.json\");\n        }else {\n            nestedPkgJson = path.join(NODE_MODULES_DIR, \".pnpm/node_modules\",depName, \"package.json\");\n        }\n        const content = fs.readFileSync(nestedPkgJson, {\n            encoding: \"utf-8\"\n        });\n\n        const { dependencies: dep } = JSON.parse(content);\n        PNPMAdapter(dep, targetId, config, level + 1, processedDeps);\n\n        processedDeps.delete(depName);\n    }\n}\n\nfunction coreHook(config: Config) {\n    const { PKG_JSON_DIR, PKG_MANAGER, } = config;\n\n    if (PKG_MANAGER === \"yarn\" || PKG_MANAGER === \"npm\") {\n        const content = fs.readFileSync(PKG_JSON_DIR, {\n            encoding: \"utf-8\"\n        });\n        const { dependencies, name = \"YourProject\", version = \"@latest\" } = JSON.parse(content);\n        const sourceId = name + version;\n        depGraph.insertNode(name, version, 0);\n        YARNorNPMAdapter(dependencies, sourceId, config);\n    }\n\n    // no finish\n    if (PKG_MANAGER === \"pnpm\") {\n        const content = fs.readFileSync(PKG_JSON_DIR, {\n            encoding: \"utf-8\"\n        });\n        const { dependencies, name = \"YourProject\", version = \"@latest\" } = JSON.parse(content);\n        const sourceId = name + version;\n        depGraph.insertNode(name, version, 0);\n        PNPMAdapter(dependencies, sourceId, config);\n    }\n\n    return depGraph;\n}\n\n\n\nexport default coreHook;\n"]}